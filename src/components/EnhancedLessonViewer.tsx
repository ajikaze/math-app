import React, { useState } from "react";
import type { LearningTopic, LearningStep } from "../data/lessonsData";
import MathJaxDisplay from "./MathJaxDisplay";
import GeometryViewer from "./GeometryViewer";
import { toLatexMath } from "../data/lessonsData";

interface EnhancedLessonViewerProps {
    currentTopic: LearningTopic;
    currentStep: LearningStep;
    currentStepIndex: number;
    onNextStep: () => void;
    onPreviousStep: () => void;
    canGoNext: boolean;
    canGoPrevious: boolean;
}

export const EnhancedLessonViewer: React.FC<EnhancedLessonViewerProps> = ({
    currentTopic,
    currentStep,
    currentStepIndex,
    onNextStep,
    onPreviousStep,
    canGoNext,
    canGoPrevious,
}) => {
    const [showAnswers, setShowAnswers] = useState<boolean[]>([]);
    const [showHints, setShowHints] = useState<boolean[]>([]);

    // „Çπ„ÉÜ„ÉÉ„Éó„ÅåÂ§â„Çè„Å£„Åü„Çâ„É™„Çª„ÉÉ„Éà
    React.useEffect(() => {
        setShowAnswers(
            currentStep.problems
                ? Array(currentStep.problems.length).fill(false)
                : []
        );
        setShowHints(
            currentStep.problems
                ? Array(currentStep.problems.length).fill(false)
                : []
        );
    }, [currentStep]);

    // Âõ≥ÂΩ¢„Éá„Éº„Çø„ÅÆÁîüÊàêÔºà„Çπ„ÉÜ„ÉÉ„Éó„ÅÆÂÜÖÂÆπ„Å´Âü∫„Å•„ÅÑ„Å¶Ôºâ
    const generateGeometryData = () => {
        const stepTitle = currentStep.title.toLowerCase();
        const stepContent = currentStep.explanation.toLowerCase();

        // ‰∏âËßíÂΩ¢Èñ¢ÈÄ£
        if (stepTitle.includes("‰∏âËßíÂΩ¢") || stepContent.includes("‰∏âËßíÂΩ¢")) {
            return {
                type: "triangle" as const,
                data: {
                    points: [
                        { x: -3, y: -2 },
                        { x: 3, y: -2 },
                        { x: 0, y: 3 },
                    ],
                },
                title: "‰∏âËßíÂΩ¢„ÅÆ‰æã",
                description: toLatexMath(`
                    „Åì„ÅÆ‰∏âËßíÂΩ¢„ÅØ„ÄÅ3„Å§„ÅÆÈ†ÇÁÇπ $A(-3, -2)$, $B(3, -2)$, $C(0, 3)$ „ÅßÊßãÊàê„Åï„Çå„Å¶„ÅÑ„Åæ„Åô„ÄÇ
                    
                    ‰∏âËßíÂΩ¢„ÅÆÊÄßË≥™Ôºö
                    ‚Ä¢ Èù¢Á©ç„ÅØÂ∫ïËæ∫ √ó È´ò„Åï √∑ 2 „ÅßË®àÁÆó„Åß„Åç„Åæ„Åô
                    ‚Ä¢ ÂÜÖËßí„ÅÆÂíå„ÅØ $180¬∞$ „Åß„Åô
                    ‚Ä¢ Â§ñËßí„ÅØÈö£„ÇäÂêà„Çè„Å™„ÅÑÂÜÖËßí„ÅÆÂíå„Å´Á≠â„Åó„ÅÑ„Åß„Åô
                `),
            };
        }

        // ÂÜÜÈñ¢ÈÄ£
        if (stepTitle.includes("ÂÜÜ") || stepContent.includes("ÂÜÜ")) {
            return {
                type: "circle" as const,
                data: {
                    center: { x: 0, y: 0 },
                    radius: 4,
                },
                title: "ÂÜÜ„ÅÆ‰æã",
                description: toLatexMath(`
                    „Åì„ÅÆÂÜÜ„ÅØ‰∏≠ÂøÉ $(0, 0)$„ÄÅÂçäÂæÑ $4$ „ÅÆÂÜÜ„Åß„Åô„ÄÇ
                    
                    ÂÜÜ„ÅÆÊÄßË≥™Ôºö
                    ‚Ä¢ Èù¢Á©ç: $A = \\pi r^2 = \\pi \\times 4^2 = 16\\pi$
                    ‚Ä¢ ÂÜÜÂë®: $C = 2\\pi r = 2\\pi \\times 4 = 8\\pi$
                    ‚Ä¢ ÂÜÜÂë®‰∏ä„ÅÆ‰ªªÊÑè„ÅÆÁÇπ„Åã„Çâ‰∏≠ÂøÉ„Åæ„Åß„ÅÆË∑ùÈõ¢„ÅØ‰∏ÄÂÆö„Åß„Åô
                `),
            };
        }

        // ‰∫åÊ¨°Èñ¢Êï∞Èñ¢ÈÄ£
        if (
            stepTitle.includes("‰∫åÊ¨°Èñ¢Êï∞") ||
            stepContent.includes("‰∫åÊ¨°Èñ¢Êï∞")
        ) {
            const quadraticFunction = (x: number) => x * x - 4;
            return {
                type: "function" as const,
                data: { function: quadraticFunction },
                title: "‰∫åÊ¨°Èñ¢Êï∞ $y = x^2 - 4$",
                description: toLatexMath(`
                    „Åì„ÅÆÈñ¢Êï∞„ÅØ $y = x^2 - 4$ „ÅÆ„Ç∞„É©„Éï„Åß„Åô„ÄÇ
                    
                    ‰∫åÊ¨°Èñ¢Êï∞„ÅÆÊÄßË≥™Ôºö
                    ‚Ä¢ È†ÇÁÇπ„ÅØ $(0, -4)$ „Åß„Åô
                    ‚Ä¢ $x$ Ëª∏„Å®„ÅÆ‰∫§ÁÇπ„ÅØ $x = \\pm 2$ „Åß„Åô
                    ‚Ä¢ ‰∏ä„Å´Âá∏„ÅÆÊîæÁâ©Á∑ö„Åß„Åô
                    ‚Ä¢ Ëª∏ÂØæÁß∞ÊÄß„Åå„ÅÇ„Çä„Åæ„Åô
                `),
            };
        }

        // ‰∏âËßíÈñ¢Êï∞Èñ¢ÈÄ£
        if (
            stepTitle.includes("‰∏âËßíÈñ¢Êï∞") ||
            stepContent.includes("‰∏âËßíÈñ¢Êï∞")
        ) {
            const sineFunction = (x: number) => 2 * Math.sin(x);
            return {
                type: "function" as const,
                data: { function: sineFunction },
                title: "Ê≠£Âº¶Èñ¢Êï∞ $y = 2\\sin(x)$",
                description: toLatexMath(`
                    „Åì„ÅÆÈñ¢Êï∞„ÅØ $y = 2\\sin(x)$ „ÅÆ„Ç∞„É©„Éï„Åß„Åô„ÄÇ
                    
                    Ê≠£Âº¶Èñ¢Êï∞„ÅÆÊÄßË≥™Ôºö
                    ‚Ä¢ ÊåØÂπÖ„ÅØ $2$ „Åß„Åô
                    ‚Ä¢ Âë®Êúü„ÅØ $2\\pi$ „Åß„Åô
                    ‚Ä¢ Â•áÈñ¢Êï∞„Åß„ÅôÔºàÂéüÁÇπÂØæÁß∞Ôºâ
                    ‚Ä¢ ÂÄ§Âüü„ÅØ $[-2, 2]$ „Åß„Åô
                `),
            };
        }

        return null;
    };

    const geometryData = generateGeometryData();

    return (
        <div className="bg-white p-6 rounded-lg shadow-md">
            <div className="mb-6">
                <h2 className="text-2xl font-bold text-gray-800 mb-2">
                    {currentTopic.topic}
                </h2>
                <p className="text-gray-600">
                    „Çπ„ÉÜ„ÉÉ„Éó {currentStepIndex + 1} /{" "}
                    {currentTopic.steps.length}
                </p>
            </div>

            <div className="mb-6">
                <h3 className="text-xl font-semibold text-gray-800 mb-4">
                    {currentStep.title}
                </h3>

                <div className="prose max-w-none break-words">
                    {/* „Éù„Ç§„É≥„ÉàÔºö‰ª•Èôç„ÇíÊ§úÂá∫„Åó„Å¶ÂàÜÂâ≤Ë°®Á§∫ */}
                    {(() => {
                        const explanation = toLatexMath(
                            currentStep.explanation
                        );
                        const pointIdx = explanation.indexOf("„Éù„Ç§„É≥„ÉàÔºö");
                        if (pointIdx === -1) {
                            return <MathJaxDisplay content={explanation} />;
                        } else {
                            const before = explanation.slice(0, pointIdx);
                            const after = explanation.slice(pointIdx);
                            return (
                                <>
                                    <MathJaxDisplay content={before} />
                                    <div className="mt-4 p-4 bg-blue-50 border border-blue-200 rounded-lg">
                                        <div className="font-semibold text-blue-800 mb-2 flex items-center">
                                            <span className="mr-1">üí°</span>
                                            „Éù„Ç§„É≥„Éà
                                        </div>
                                        <MathJaxDisplay
                                            content={after
                                                .replace(/^„Éù„Ç§„É≥„ÉàÔºö/, "")
                                                .replace(/^„Éù„Ç§„É≥„Éà/, "")
                                                .replace(/^<br\s*\/?\s*>/, "")}
                                        />
                                    </div>
                                </>
                            );
                        }
                    })()}
                </div>

                {/* Âõ≥ÂΩ¢„Éª„Ç∞„É©„Éï„ÅÆË°®Á§∫ */}
                {geometryData && (
                    <div className="mt-6">
                        <GeometryViewer
                            type={geometryData.type}
                            title={geometryData.title}
                            description={geometryData.description}
                            data={geometryData.data}
                            interactive={true}
                            width={400}
                            height={300}
                        />
                    </div>
                )}
            </div>

            {currentStep.pitfall && (
                <div className="mb-6 p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
                    <h4 className="font-semibold text-yellow-800 mb-2">
                        ‚ö†Ô∏è Ê≥®ÊÑèÁÇπ
                    </h4>
                    <MathJaxDisplay
                        content={toLatexMath(currentStep.pitfall.detail)}
                    />
                </div>
            )}

            {currentStep.problems && currentStep.problems.length > 0 && (
                <div className="mb-6">
                    <h4 className="font-semibold text-gray-800 mb-3">‰æãÈ°å</h4>
                    {currentStep.problems.map((problem, index) => (
                        <div
                            key={index}
                            className="mb-4 p-4 bg-gray-50 rounded-lg overflow-hidden"
                        >
                            <div className="mb-2 flex flex-row items-start gap-2 bg-gray-50 border-l-4 border-blue-400 pl-3 rounded">
                                <span className="font-semibold text-blue-700 min-w-[3.5rem] whitespace-nowrap flex-shrink-0">
                                    ÂïèÈ°åÔºö
                                </span>
                                <div className="flex-1 break-words font-semibold">
                                    <MathJaxDisplay
                                        content={toLatexMath(problem.question)}
                                    />
                                </div>
                            </div>
                            <div className="mt-8 flex flex-row items-center gap-2 justify-end">
                                {problem.hint && (
                                    <button
                                        onClick={() => {
                                            const newShowHints = [...showHints];
                                            newShowHints[index] =
                                                !newShowHints[index];
                                            setShowHints(newShowHints);
                                        }}
                                        className="px-3 py-1 bg-yellow-500 text-white rounded-md hover:bg-yellow-600 transition-colors text-sm"
                                    >
                                        {showHints[index]
                                            ? "„Éí„É≥„Éà„ÇíÈö†„Åô"
                                            : "„Éí„É≥„Éà„ÇíË¶ã„Çã"}
                                    </button>
                                )}
                                <button
                                    onClick={() => {
                                        const newShowAnswers = [...showAnswers];
                                        newShowAnswers[index] =
                                            !newShowAnswers[index];
                                        setShowAnswers(newShowAnswers);
                                    }}
                                    className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors text-sm"
                                >
                                    {showAnswers[index]
                                        ? "Á≠î„Åà„ÇíÈö†„Åô"
                                        : "Á≠î„Åà„ÇíË¶ã„Çã"}
                                </button>
                            </div>
                            {showAnswers[index] && (
                                <div className="mt-4 mb-2 ml-1 p-3 bg-blue-50 border border-blue-200 rounded transition-all">
                                    <MathJaxDisplay
                                        content={toLatexMath(problem.answer)}
                                    />
                                </div>
                            )}
                            {showHints[index] && problem.hint && (
                                <div className="mt-4 mb-2 ml-1 p-3 bg-yellow-50 border border-yellow-200 rounded transition-all">
                                    <MathJaxDisplay
                                        content={toLatexMath(problem.hint)}
                                    />
                                </div>
                            )}
                        </div>
                    ))}
                </div>
            )}

            <div className="flex justify-between items-center pt-4 border-t border-gray-200">
                <button
                    onClick={onPreviousStep}
                    disabled={!canGoPrevious}
                    className="px-4 py-2 bg-gray-500 text-white rounded-md hover:bg-gray-600 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors"
                >
                    Ââç„Å∏
                </button>

                <button
                    onClick={onNextStep}
                    disabled={!canGoNext}
                    className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors"
                >
                    Ê¨°„Å∏
                </button>
            </div>
        </div>
    );
};

export default EnhancedLessonViewer;
